一、实现的运算（优先级从高到低）
lex() 一次读取处理一个立即数/变量/操作数
factor()  最小单位的值或者（...）包裹的原子结构值
bitwise() ：支持位运算，解析异或(^) 右移运算（##代替>>) 左移运算（$$代替<<)  与运算 （？） 或运算（@）
term():  乘除运算
expr():  加减运算
boolExpr(): 布尔（式）比较运算  >= <= != 只能进行一步
boolLex(）： 布尔比较综合式  且运算&& 或运算|| 可以多个依次排列
settleBracket(): 处理{}
辅助：
judgeSignal()：判断下一个符号操作数类型
noteDeal（）：处理//和/**/形式的注释
其他基础操作和教材相似，比如getChar和addChar
二、实现的语法   
1、声明变量 declare 检查是否是给定的类型中的一个，int和double  开辟一个symboltable符号表项
2、ifstmt() : if 语句处理 例子if(a==b){...}else{}  实现方式就是先进行boolLex之后ignore掉不需要执行的并执行需要执行的区段，
同时else可以不存在使得判断出来不存在之后需要把后续被误读的句子还回缓冲区
3、whilestmt() : while语句处理，例子 while(a>5&&b>=2){a=a-1;b=b*2;} 循环实现的方式就是在boolLex判断循环之后执行字段时
用定义的storeSentences缓存这一段执行字段并在循环开始时写回从而实现反复读取和执行
4、assign() ：赋值语句，a=5;
5、入口：handle（） 通过循环lex()和handle（）来不断判断语句类型并调用对应的处理函数
6、exceptionReport() 错误汇报语句，给定关键字序号输出对应报告
三、样例给在compile目录下的in.txt中
类似如下的程序经过测试能够正常读取和处理，鲁棒性方面经过一天多的测试修改了已知的问题，如果有疏漏之处请指出，感激不尽！
int j=2;
double i=1.0;// note test
while(j<=10.0&&i!=15)  
{j=j+1.0;
i=i*2+1;}
if(i>j)
{i=0.5}
else{j=4;}
else{}
if(i%5==j^3)
{if(j$$2 !=0){i=i/j}
else{}}
/*some good news
lol*/
四、老师助教辛苦啦  ><
